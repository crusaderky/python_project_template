[project]
name = "TEMPLATE"
authors = [{ name = "TODO", email = "TODO@TODO.com" }]
license = "Apache-2.0"
description = "TODO"
keywords = ["TODO", "TODO"]
classifiers = [
  # TODO update choosing from https://pypi.org/pypi?%3Aaction=list_classifiers
  "Development Status :: 3 - Alpha",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  # TODO adjust according to
  # https://py-free-threading.github.io/porting/#define-and-document-thread-safety-guarantees
  "Programming Language :: Python :: Free Threading :: 2 - Beta",
]
requires-python = ">=3.11"
dependencies = [
  # TODO your project dependencies here
  # numpy >= 1.23
  # pandas >= 2.0
]
dynamic = ["version"]

[project.optional-dependencies]
# TODO optional pip dependencies
# some_label = ["dependency1", "dependency2"]

[project.urls]
Homepage = "https://github.com/TODO/TEMPLATE"
"Bug Tracker" = "https://github.com/TODO/TEMPLATE/issues"
Changelog = "https://TEMPLATE.readthedocs.io/en/latest/whats-new.html"

[project.readme]
text = "TODO"
content-type = "text/plain"

[tool.setuptools]
zip-safe = false # https://mypy.readthedocs.io/en/latest/installed_packages.html
include-package-data = true

[tool.setuptools.packages]
find = { namespaces = false }

[tool.setuptools_scm]
# Use hardcoded version when .git has been removed and this is not a package created
# by sdist. This is the case e.g. of a remote deployment with PyCharm.
fallback_version = "9999"

[tool.setuptools.package-data]
TEMPLATE = [
  "py.typed",
  "tests/data/*",
]

[build-system]
requires = [
  "setuptools>=66",
  "setuptools_scm[toml]",
]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config -v -r sxfE --color=yes --durations=10"
xfail_strict = true
python_files = ["test_*.py"]
testpaths = ["TEMPLATE/tests"]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
filterwarnings = ["error"]

[tool.coverage.report]
show_missing = true

[tool.codespell]
skip = "pixi.lock,build,htmlcov"

[tool.ruff]
exclude = [".eggs"]
target-version = "py311"

[tool.ruff.lint]
ignore = [
  "EM101", # Exception must not use a string literal, assign to variable first
  "EM102", # Exception must not use an f-string literal, assign to variable first
  "N802", # Function name should be lowercase
  "N803", # Argument name should be lowercase
  "N806", # Variable should be lowercase
  "N816", # Variable in global scope should not be mixedCase
  "PD901", # Avoid using the generic variable name `df` for DataFrames
  "PT006", # Wrong type passed to first argument of `pytest.mark.parametrize`; expected `tuple`
  "PLC0414", # Import alias does not rename original package
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0915", # Too many statements
  "PLR2004", # Magic value used in comparison, consider replacing `123` with a constant variable
  "PLW2901", # for loop variable overwritten by assignment target
  "SIM108", # Use ternary operator instead of if-else block
  "N999", # Invalid module name: 'TEMPLATE'  TODO remove this line
]
select = [
  "YTT", # flake8-2020
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "EM", # flake8-errmsg
  "EXE", # flake8-executable
  "ICN", # flake8-import-conventions
  "G", # flake8-logging-format
  "PIE", # flake8-pie
  "PT", # flake8-pytest-style
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "ARG", # flake8-unused-arguments
  "I", # isort
  "NPY", # NumPy specific rules
  "N", # pep8-naming
  "E", # Pycodestyle
  "W", # Pycodestyle
  "PGH", # pygrep-hooks
  "F", # Pyflakes
  "PD", # pandas-vet
  "PL", # pylint
  "UP", # pyupgrade
  "RUF", # unused-noqa
  "TID", # tidy-ups
  "EXE001", #  Shebang is present but file is not executable
]

[tool.ruff.lint.isort]
known-first-party = ["TEMPLATE"]

[tool.mypy]
files = ["TEMPLATE"]
python_version = "3.11"
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
enable_error_code = ["ignore-without-code", "possibly-undefined", "truthy-bool"]

[[tool.mypy.overrides]]
module = ["*.tests.*"]
disallow_untyped_defs = false

[tool.pixi.project]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["linux-64", "linux-aarch64", "osx-64", "osx-arm64", "win-64"]

[tool.pixi.dependencies]
python = "*"
# TODO repeat dependencies here
# No need to repeat minimum version; = "*" is enough

[tool.pixi.feature.lint.dependencies]
lefthook = "*"
ruff = "*"
mypy = "*"
dprint = "*"
actionlint = "*"
codespell = "*"
blacken-docs = "*"
validate-pyproject = "*"
sphinx-lint = "*"
# mypy check dependencies
# TODO typed libraries for mypy here

[tool.pixi.feature.lint.tasks]
install-git-hooks = { cmd = "lefthook install", description = "Install pre-commit hooks" }
lint = { cmd = "lefthook run pre-commit --all-files --force", description = "Run all linters" }

[tool.pixi.feature.smoke.tasks]
smoke-test = { cmd = "python smoke_test.py", description = "Test import the library and print essential information" }

[tool.pixi.feature.tests.dependencies]
pytest = "*"
pytest-cov = "*"

[tool.pixi.feature.tests.tasks]
tests = { cmd = "pytest", description = "Run tests" }
tests-cov = { cmd = "pytest --cov --cov-report=xml --cov-report=term", description = "Run tests with coverage" }
coverage = { cmd = "coverage html", depends-on = ["tests-cov"], description = "Generate test coverage html report" }
open-coverage = { cmd = "open htmlcov/index.html", depends-on = ["coverage"], description = "Open test coverage report" }

[tool.pixi.feature.docs.dependencies]
pip = "*"
sphinx = "*"
sphinx_rtd_theme = "*"

[tool.pixi.feature.docs.tasks]
docs = { cmd = "sphinx-build -n -j auto -b html -d ../build/doctrees . ../build/html", env = { PYTHONPATH = "$PIXI_PROJECT_ROOT" }, cwd = "doc", description = "Build docs" }
open-docs = { cmd = "open build/html/index.html", depends-on = ["docs"], description = "Open the generated docs" }
doc-requirements = { cmd = "echo '# File generated by `pixi run doc-requirements`' > doc/requirements.yml && pixi workspace export conda-environment -e docs >> doc/requirements.yml", description = "Export doc requirements for readthedocs CI" }

[tool.pixi.feature.ipython.dependencies]
ipython = "*"

[tool.pixi.feature.ipython.tasks]
ipython = { cmd = "ipython", description = "Launch IPython" }

[tool.pixi.feature.py311.dependencies]
python = "=3.11"

[tool.pixi.feature.py313.dependencies]
python = "=3.13"

[tool.pixi.feature.nogil.dependencies]
python-freethreading = "=3.13"
pytest-run-parallel = "*"

[tool.pixi.feature.mindeps.dependencies]
python = "=3.11"
# TODO repeat dependencies here, but use = instead of >=

[tool.pixi.feature.upstream.dependencies]
python = "=3.13" # TODO python 3.14 prereleases?

[tool.pixi.feature.upstream.pypi-dependencies]
# TODO uncomment relevant dependencies
# numpy = { index = "https://pypi.anaconda.org/scientific-python-nightly-wheels/simple" }
# pandas = { index = "https://pypi.anaconda.org/scientific-python-nightly-wheels/simple" }
# scipy = { index = "https://pypi.anaconda.org/scientific-python-nightly-wheels/simple" }
# xarray = { index = "https://pypi.anaconda.org/scientific-python-nightly-wheels/simple" }
# dask = { git = "https://github.com/dask/dask.git" }

[tool.pixi.feature.dist.dependencies]
python-build = "*"
twine = "*"

[tool.pixi.feature.dist.tasks]
dist-clear = { cmd = "rm -rf build dist" }
build = { cmd = "python -m build", description = "Build pypi artifacts" }
twine-check = { cmd = "python -m twine check dist/*" }
dist = { depends-on = ["dist-clear", "build", "twine-check"] }
twine-upload = { depends-on = ["dist"], cmd = "python -m twine upload dist/*" }

[tool.pixi.environments]
# FIXME use same solve-groups with and without numba
default = { features = ["py313", "docs", "smoke", "tests", "ipython"], solve-group = "py313" }
dist = { features = ["dist"], no-default-feature = true }
lint = { features = ["lint"], no-default-feature = true }
docs = { features = ["py313", "docs"], solve-group = "py313" }
mindeps = { features = ["mindeps", "smoke", "tests"] }
py311 = { features = ["py311", "smoke", "tests"] }
py313 = { features = ["py313", "smoke", "tests"], solve-group = "py313" }
nogil = { features = ["nogil", "smoke", "tests"], no-default-feature = true }
upstream = { features = ["upstream", "smoke", "tests"], no-default-feature = true }
smoke = { features = ["smoke"] }
